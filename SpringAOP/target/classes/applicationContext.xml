<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd
">

    <aop:config>
        <!--配置切面-->

<!--        <aop:aspect ref="advice">-->
            <!--配置切面，把通知类中的方法和目标类中的方法进行关联-->
            <!--切入点表达式，要把方法的包名和类名都带上，方法修饰符可以省略-->
        <!--<aop:before method="one" pointcut="execution(public void com.dx.springaop.TargetObj.method1())" />-->
            <!--匹配返回值类型-->
<!--            <aop:before method="one" pointcut="execution(* com.dx.springaop.TargetObj.method1())" />-->
            <!--匹配包名-->
<!--            <aop:before method="one" pointcut="execution(* *.*.springaop.TargetObj.method1())" />-->
            <!--"*.."表示匹配任意层级的包名匹配-->
<!--            <aop:before method="one" pointcut="execution(* *..TargetObj.method1())"/>-->
            <!--"*"号可以表示任意开头、结尾或者中间的字符串-->
            <!--"Tar*"表示以Tar开头的类名-->
<!--            <aop:before method="one" pointcut="execution(* *..Tar*.method1())"/>-->
            <!--"*"号可以表示任意开头、结尾或者中间的字符串-->
            <!--"met*"表示以Tar开头的方法名-->
<!--            <aop:before method="one" pointcut="execution(* *..Tar*.met*())"/>-->
            <!--".."号可以表示任意多个参数(包括0个).也可以直接与关键字联用或者单用关键字.还可以与"*"联用，三者可以排列组合使用-->
<!--            <aop:before method="one" pointcut="execution(* *..Tar*.met*(int,*,..))"/>-->

<!--        </aop:aspect>-->

        <!--切面间共享切入点-->
<!--        <aop:pointcut id="abc" expression="execution(public void com.dx.springaop.TargetObj.method3())"/>-->
<!--        <aop:aspect ref="advice">-->
<!--            <aop:before method="one" pointcut-ref="abc"/>-->
<!--        </aop:aspect>-->
<!--        <aop:aspect ref="advice">-->
<!--            <aop:before method="two" pointcut-ref="abc"/>-->
<!--        </aop:aspect>-->

        <aop:pointcut id="abc" expression="execution(* *..TargetObj.method1(..))"/>
        <!--切面内共享切入点-->
        <aop:aspect ref="advice">
            <!--前置通知-->
            <aop:around method="around" pointcut-ref="abc"/>
            <aop:before method="before" pointcut-ref="abc"/>

            <!--后置通知-->
            <aop:after method="after" pointcut-ref="abc"/>
            <!--返回后通知-->
            <aop:after-returning method="afterReturning" pointcut-ref="abc"/>
            <!--抛出异常后通知-->
<!--            <aop:after-throwing method="afterThrowing" pointcut-ref="abc"/>-->
            <!--环绕通知-->

        </aop:aspect>



    </aop:config>
    <aop:config>
        <aop:pointcut id="method4" expression="execution(* com.dx.springaop.TargetObj.method4(..)) &amp;&amp; args(a,b)"/>
        <aop:aspect ref="advice">
            <aop:before method="before2" pointcut-ref="method4"/>
        </aop:aspect>
    </aop:config>

    <aop:config>
        <aop:pointcut id="method5" expression="execution(* com.dx.springaop.TargetObj.method5(..))"/>
        <aop:aspect ref="advice">
            <aop:around method="around2" pointcut-ref="method5"/>
        </aop:aspect>
        <aop:aspect ref="advice">
            <aop:after-returning method="afterReturning1" pointcut-ref="method5" returning="rst"/>
        </aop:aspect>
        <aop:aspect ref="advice">
            <aop:after-throwing method="afterThrowing1" pointcut-ref="method5" throwing="e"/>
        </aop:aspect>
    </aop:config>

    <!--目标对象-->
    <bean id="target" class="com.dx.springaop.TargetObj"></bean>
    <!--通知对象-->
    <bean id="advice" class="com.dx.springaop.MyAdvice"></bean>

</beans>